# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B8E_fvUvdi9YetGA8AHWQdo059bMDehT

Import Functions
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

"""Datasets loading"""

train_data=pd.read_csv('train data.csv')
train_data.head()

oil_prices=pd.read_csv('oil price.csv')
oil_prices.head()

holidays=pd.read_csv('holidays.csv')
print(holidays.head())

"""Converting date to datetime"""

train_data['date'] = pd.to_datetime(train_data['date'])
oil_prices['date'] = pd.to_datetime(oil_prices['date'])
holidays['date'] = pd.to_datetime(holidays['date'])
train_data.set_index('date', inplace=True)
oil_prices.set_index('date', inplace=True)
holidays.set_index('date', inplace=True)

"""Aggregating sales"""

total_daily_sales = train_data.groupby('date')['sales'].sum()
total_daily_sales = total_daily_sales[total_daily_sales.index.drop_duplicates(keep='first')]
print("Dropped duplicate dates in sales data, if any.")
print(total_daily_sales)

holidays['holiday']=holidays['type'].apply(lambda x:1 if x=='Holiday' else 0)

"""Merging oil prices and holidays with sales data"""

exog_data = pd.merge(total_daily_sales, oil_prices[['dcoilwtico']], left_index=True, right_index=True, how='left')
exog_data = pd.merge(exog_data, holidays[['holiday']], left_index=True, right_index=True, how='left')

"""Checking duplicates and removing them"""

total_daily_sales = total_daily_sales[total_daily_sales.index.drop_duplicates(keep='first')]
print("Dropped duplicate dates in sales data, if any.")
exog_data=exog_data.loc[exog_data.index.drop_duplicates(keep='first')]
print("Dropped Duplicates in exog data if any")
print(exog_data)

"""Checking missing values and removing them"""

exog_data['dcoilwtico'] = exog_data['dcoilwtico'].ffill().bfill()  # Forward-fill and backward-fill missing oil prices
exog_data['holiday'] = exog_data['holiday'].fillna(0)  # Fill missing holiday values with 0 (non-holiday)

# Align exog_vars with total_daily_sales
exog_vars = exog_data[['dcoilwtico', 'holiday']]
exog_vars = exog_vars.loc[~exog_vars.index.duplicated(keep='first')]
exog_vars = exog_vars.reindex(total_daily_sales.index)

"""Directional accuracy function"""

def directionality_accuracy(actual, predicted):
    return np.mean(np.sign(np.diff(actual)) == np.sign(np.diff(predicted)))

"""Evaluating RMSE"""

def evaluate_rmse_with_exog():
    model = ARIMA(total_daily_sales, order=(5, 1, 5), exog=exog_vars)
    model_fit = model.fit()

    # Forecast and comparing
    forecast_steps = 365
    train_end = len(total_daily_sales) - forecast_steps
    test = total_daily_sales[train_end:]
    predictions = model_fit.predict(start=train_end, end=len(total_daily_sales)-1, exog=exog_vars.iloc[train_end:])

    # Calculate and return RMSE
    rmse = np.sqrt(mean_squared_error(test, predictions))
    print(f"ARIMA(5,1,5) with Exogenous Variables - RMSE: {rmse}")
    return rmse, test, predictions

"""Evaluating Directional accuracy"""

def evaluate_directionality_with_exog():
    model = ARIMA(total_daily_sales, order=(5, 1, 5), exog=exog_vars)
    model_fit = model.fit()

    # Forecast and compare
    forecast_steps = 365
    train_end = len(total_daily_sales) - forecast_steps
    test = total_daily_sales[train_end:]
    predictions = model_fit.predict(start=train_end, end=len(total_daily_sales)-1, exog=exog_vars.iloc[train_end:])

    # Calculate and return Directionality Accuracy
    direction_acc = directionality_accuracy(test, predictions)
    print(f"ARIMA(5,1,5) with Exogenous Variables - Directionality Accuracy: {direction_acc:.2f}")
    return direction_acc

rmse, test, predictions = evaluate_rmse_with_exog()
direction_acc = evaluate_directionality_with_exog()

"""Forecasting"""

model = ARIMA(total_daily_sales, order=(5, 1, 5), exog=exog_vars)
model_fit = model.fit()

forecast_steps = 365
future_exog_vars = exog_vars.iloc[-forecast_steps:]
forecast = model_fit.forecast(steps=forecast_steps, exog=future_exog_vars)
forecast_index = pd.date_range(start=total_daily_sales.index[-1] + pd.Timedelta(days=1), periods=forecast_steps, freq='D')

print(forecast)

"""Plotting Historical Sales"""

plt.figure(figsize=(10, 6))
plt.plot(total_daily_sales.index, total_daily_sales, label='Historical Sales', color='blue')
plt.plot(test.index, predictions, label='Predicted Sales', color='green')
plt.title('Historical and Predicted Store Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Plotting Forecasted data"""

plt.figure(figsize=(10, 6))
plt.plot(forecast_index, forecast, label='Forecasted Sales', color='red')
plt.title('Forecasted Store Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Output"""

output_data = pd.DataFrame({
    'Date': test.index.append(forecast_index),
    'Actual Sales': test.values.tolist() + [None] * forecast_steps,
    'Predicted Sales': predictions.tolist() + [None] * forecast_steps,
    'Forecasted Sales': [None] * len(test) + forecast.tolist()
})

#saving the file
output_data.to_csv('sales_predictions_with_Arima.csv', index=False)
print("File saved")

#For colab
#from google.colab import files
#files.download('sales_predictions_with_Arima.csv')

